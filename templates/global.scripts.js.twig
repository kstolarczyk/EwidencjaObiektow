{% trans_default_domain 'App' %}
$.fn.disable = function () {
    $(this).prop("disabled", true);
};

$.fn.enable = function () {
    $(this).prop("disabled", false);
};

$.fn.ajaxDataTable = function (url, data, dtOptions) {
    let thCols = $(this).find("thead th");
    let defOptions = {
        language: {% include 'datatable.lang.'~app.request.locale~'.json' %},
        serverSide: true,
        searchDelay: 250,
        ajax: {
            url: url,
            data: function (readyData) {
                readyData['order'] = readyData['order'].reduce(function (map, obj) {
                    let key = thCols.eq(obj.column)[0].dataset.key;
                    map[key] = obj.dir;
                    return map;
                }, {});
                return Object.assign(readyData, data);
            }
        },
        columnDefs: [
            {
                targets: 'custom-class',
                createdCell: function (cell, cellData, rowData, row, col) {
                    let th = thCols.eq(col)[0];
                    let customClass = th.dataset.class;
                    $(cell).addClass(customClass);
                }
            },
            {
                targets: 'custom-render',
                data: null,
                render: function (data, type, row, meta) {
                    let th = thCols.eq(meta.col)[0];
                    let render = th.dataset.render;
                    return window[render](row);
                }
            },
            {
                targets: '_all',
                data: function (row, type, set, meta) {
                    let th = thCols.eq(meta.col)[0];
                    let key = th.dataset.key;
                    return row[key] ? row[key] : '';
                }
            }
        ]
    };
    let dt = $(this).DataTable(Object.assign(defOptions, dtOptions));
    let dtSearchField = $(this).closest(".dataTables_wrapper").find("div.dataTables_filter input");
    let searchTimeout = null;
    dtSearchField.off("keyup.DT input.DT cut.DT paste.DT")
        .on("paste.DT cut.DT input.DT", function () {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(function () {
                let searchText = dtSearchField.val();
                if (searchText === '' || searchText.length >= 2) {
                    dt.search(searchText).draw();
                }
            }, dt.settings().searchDelay);
        });
    return dt;
};

$(document).on("shown.bs.modal", ".modal", function () {
    $(this).find(":focusable:not(button)").first().focus();
});

$(document).ajaxStart(function () {
    let buttons = $(".btn:not(.ajax-disabled)");
    buttons.addClass("ajax-disabled");
    buttons.disable();
});
$(document).ajaxStop(function () {
    let buttons = $(".ajax-disabled");
    buttons.removeClass("ajax-disabled");
    buttons.enable();
});

$(document).ajaxComplete(function (event, xhr) {
    switch (xhr.status) {
        case 404:
            error({
                text: "{{ 'Nie.odnaleziono.obiektu'|trans }}"
            });
            break;
        case 500:
            error({
                text: "{{ 'Nieoczekiwany.blad.aplikacji'|trans }}"
            });
            break;
        case 403:
            error({
                text: "{{ 'Odmowa.dostepu'|trans }}"
            });
            window.location.reload();
            break;
    }
});

function initMapsApi() {
    google.maps.Map.prototype.clearMarkers = function () {
        for (let i in this.markers) {
            this.markers[i].setMap(null);
        }
        this.markers.length = 0;
    }
    google.maps.Map.prototype.setMarkers = function (markers) {
        this.clearMarkers();
        for (let i in markers) {
            let properties = {map: this};
            for (let p in markers[i]) {
                if (markers[i].hasOwnProperty(p)) {
                    properties[p] = markers[i][p];
                }
            }
            let marker = new google.maps.Marker(properties);
            this.markers.push(marker);
        }
    }
    google.maps.Map.prototype.addEventListener = function (eventName, callback) {
        google.maps.event.addListener(this, eventName, callback);
    }
    $.prototype.initMapSingleMarker = function (coords, zoom) {
        let map = new google.maps.Map($(this)[0], {zoom: zoom, center: coords});
        map.markers = [];
        map.infoWindows = [];
        google.maps.event.addListener(map, 'click', function (event) {
            map.clearMarkers();
            let marker = new google.maps.Marker({
                position: event.latLng,
                map: map
            });
            map.markers.push(marker);
        });
        return map;
    }

    $.prototype.initMapNoMarker = function (coords, zoom) {
        let map = new google.maps.Map($(this)[0], {zoom: zoom, center: coords});
        map.markers = [];
        map.infoWindows = [];
        return map;
    }
}
